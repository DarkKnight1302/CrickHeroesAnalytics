@page "/purple-cap-leaderboard"
@rendermode InteractiveServer
@using CricHeroesAnalytics.Entities
@using CricHeroesAnalytics.Repositories
@using CricHeroesAnalytics.Services.Interfaces
@using CricHeroesAnalytics.Components.Layout
@inject IPlayerAnalyticsService playerService
@inject IMatchAnalyticService matchService
@inject IJobExecutionRepository jobExecutionRepository
@inject IPlayerStatService playerStatService
@inherits LayoutComponentBase
@layout MainLayout
@inject IJSRuntime JS

<main class="page-container">
    <div class="bg-animation"></div>
    <div class="header-container">
        <h1 class="page-title">
            <span class="icon purple">🎯</span>
            Purple Cap Leaderboard
        </h1>
        <p class="page-subtitle">Leading wicket takers of the season</p>
    </div>

    <div class="leaderboard-table-container">
        <table>
            <thead>
                <tr>
                    <th>#</th>
                    <th>Player</th>
                    <th>Wickets</th>
                    <th>Avg</th>
                    <th>Econ</th>
                </tr>
            </thead>
            <tbody>
                @if (players.Any())
                {
                    var rank = 1;
                    @foreach (var player in players.OrderByDescending(p => p.TotalWickets).ThenBy(p => p.BowlingEconomy == 0 ? double.MaxValue : p.BowlingEconomy))
                    {
                        <tr class="@(player == topWicketTaker ? "top-player" : "")">
                            <td class="rank">@(rank++)</td>
                            <td class="player-info">
                                <a href="@player.PlayerProfile" target="_blank">
                                    <img src="@player.PlayerProfilePic" alt="@player.Name" class="player-avatar" onerror="this.onerror=null;this.src='https://placehold.co/40x40/1e293b/f8fafc?text=P';" />
                                    @player.Name
                                </a>
                                @if (player == topWicketTaker)
                                {
                                    <img src="/images/PurpleCap.png" alt="Purple Cap" class="cap-icon" />
                                }
                            </td>
                            <td class="stat-wickets">@player.TotalWickets</td>
                            <td class="stat">@player.BowlingAverage</td>
                            <td class="stat">
                                @GetStatWithArrow(player.BowlingEconomy, last5BowlingStats.TryGetValue(player.Id, out var last5Eco) ? last5Eco : 0, false)
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="5" class="loading-cell">
                            <div class="spinner"></div>
                            <span>Loading player data...</span>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="footer-section">
        <button @onclick="Refresh" class="refresh-button">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-clockwise" viewBox="0 0 16 16"><path fill-rule="evenodd" d="M8 3a5 5 0 1 0 4.546 2.914.5.5 0 0 1 .908-.417A6 6 0 1 1 8 2v1z" /><path d="M8 4.466V.534a.25.25 0 0 1 .41-.192l2.36 1.966c.12.1.12.284 0 .384L8.41 4.658A.25.25 0 0 1 8 4.466z" /></svg>
            Refresh
        </button>
        <div class="last-updated">
            Last updated: @lastUpdateTime.ToString("MMMM dd, yyyy hh:mm tt")
        </div>
    </div>
</main>

<style>
    :root {
        --primary-purple: #8b5cf6;
        --dark-bg: #0f172a;
        --card-bg: #1e293b;
        --text-primary: #f8fafc;
        --text-secondary: #94a3b8;
        --border-color: rgba(255, 255, 255, 0.1);
        --gradient-purple: linear-gradient(135deg, #8b5cf6, #06b6d4);
    }

    .page-container {
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
        background: var(--dark-bg);
        color: var(--text-primary);
        padding: 2rem;
        max-width: 900px;
        margin: 2rem auto;
        border-radius: 20px;
        position: relative;
        overflow: hidden;
        border: 1px solid var(--border-color);
    }

    .bg-animation {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: 0;
        background: radial-gradient(circle at 80% 20%, rgba(139, 92, 246, 0.1) 0%, transparent 40%);
        animation: float 20s ease-in-out infinite;
    }

    @@keyframes float {
        0%, 100% {
            transform: translate(0, 0);
        }

        50% {
            transform: translate(-20px, 20px);
        }
    }

    .header-container {
        text-align: center;
        margin-bottom: 2.5rem;
        position: relative;
        z-index: 1;
    }

    .page-title {
        font-size: 2.5rem;
        font-weight: 800;
        background: var(--gradient-purple);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        margin-bottom: 0.5rem;
        display: inline-flex;
        align-items: center;
        gap: 1rem;
    }

        .page-title .icon {
            font-size: 2rem;
        }

    .page-subtitle {
        color: var(--text-secondary);
        font-size: 1.1rem;
    }

    .leaderboard-table-container {
        background: var(--card-bg);
        border-radius: 15px;
        padding: 1rem;
        border: 1px solid var(--border-color);
        position: relative;
        z-index: 1;
    }

    table {
        width: 100%;
        border-collapse: collapse;
    }

    th, td {
        padding: 1rem;
        text-align: left;
    }

    th {
        color: var(--text-secondary);
        font-weight: 600;
        text-transform: uppercase;
        font-size: 0.8rem;
        border-bottom: 2px solid var(--border-color);
    }

    tbody tr {
        border-bottom: 1px solid var(--border-color);
        transition: background-color 0.3s ease;
    }

        tbody tr:last-child {
            border-bottom: none;
        }

        tbody tr:hover {
            background-color: rgba(255, 255, 255, 0.05);
        }

    .top-player {
        background: linear-gradient(90deg, rgba(139, 92, 246, 0.15), transparent);
        border-left: 4px solid var(--primary-purple);
    }

    .rank {
        font-weight: 700;
        font-size: 1.1rem;
        color: var(--text-secondary);
        text-align: center;
    }

    .player-info {
        display: flex;
        align-items: center;
        gap: 1rem;
    }

        .player-info a {
            color: var(--text-primary);
            text-decoration: none;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 1rem;
            transition: color 0.3s ease;
        }

            .player-info a:hover {
                color: var(--primary-purple);
            }

    .player-avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        object-fit: cover;
        border: 2px solid var(--border-color);
    }

    .cap-icon {
        width: 40px;
        height: 30px;
    }

    .stat-wickets {
        font-weight: 700;
        font-size: 1.2rem;
        color: var(--primary-purple);
    }

    .stat {
        font-weight: 500;
        text-align: center;
    }

    .footer-section {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-top: 2rem;
        position: relative;
        z-index: 1;
    }

    .refresh-button {
        background: var(--gradient-purple);
        color: white;
        border: none;
        padding: 0.75rem 1.5rem;
        border-radius: 50px;
        font-size: 1rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
    }

        .refresh-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 20px rgba(139, 92, 246, 0.2);
        }

    .last-updated {
        font-size: 0.9em;
        color: var(--text-secondary);
    }

    .spinner {
        width: 40px;
        height: 40px;
        border: 3px solid rgba(139, 92, 246, 0.3);
        border-top: 3px solid var(--primary-purple);
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    .loading-cell {
        text-align: center;
        padding: 3rem;
        color: var(--text-secondary);
    }

        .loading-cell .spinner {
            margin: 0 auto 1rem;
        }

    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }

    @@media (max-width: 768px) {
        .page-container {
            padding: 1rem;
            margin: 1rem;
        }

        .page-title {
            font-size: 2rem;
        }

        th, td {
            padding: 0.75rem;
        }

        .player-info a {
            flex-direction: column;
            text-align: center;
            gap: 0.5rem;
        }

        .footer-section {
            flex-direction: column;
            gap: 1rem;
        }
    }
</style>

@code {
    private IEnumerable<Player> players = new List<Player>();
    private Player? topWicketTaker;
    private DateTimeOffset lastUpdateTime = DateTimeOffset.MinValue;
    private Dictionary<string, double> last5BowlingStats = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        players = await playerService.GetAllPlayersAsync();

        foreach (var p in players)
        {
            if (p.TotalWickets > 0)
            {
                double bowlingAverage = ((double)p.RunsGiven / (double)p.TotalWickets);
                p.BowlingAverage = Math.Round(bowlingAverage, 1);
            }
            double last5Eco = playerStatService.GetEconomyFromLastNInnings(p, 5);
            last5BowlingStats[p.Id] = last5Eco;
        }

        topWicketTaker = players.OrderByDescending(p => p.TotalWickets).FirstOrDefault();
        lastUpdateTime = await jobExecutionRepository.GetLastSuccessJobTime(Constants.GlobalConstants.CustomUpdateScoreJob);
        StateHasChanged();
    }

    private MarkupString GetStatWithArrow(double overall, double last5, bool isHigherBetter = true)
    {
        const string arrowStyle = "font-family: 'Consolas', 'Courier New', monospace; font-size: 0.95em; vertical-align: -0.15em; display: inline-block; margin-right: 4px;";
        const string dotStyle = "color:gray; font-size: 1em; vertical-align: -0.15em; display: inline-block; margin-right: 4px;";

        if (last5 == 0)
            return new MarkupString($"{overall}");

        if ((isHigherBetter && last5 > overall) || (!isHigherBetter && last5 < overall))
        {
            return new MarkupString($@"<span style=""color:#22c55e;{arrowStyle}"">▲</span> {overall}");
        }
        else if ((isHigherBetter && last5 < overall) || (!isHigherBetter && last5 > overall))
        {
            return new MarkupString($@"<span style=""color:#ef4444;{arrowStyle}"">▼</span> {overall}");
        }
        else
        {
            return new MarkupString($@"<span style=""{dotStyle}"">•</span> {overall}");
        }
    }

    async Task Refresh()
    {
        players = new List<Player>();
        StateHasChanged();
        await matchService.UpdateLatestMatchData();
        await LoadData();
    }
}
