@page "/orange-cap-leaderboard"
@rendermode InteractiveServer
@using CricHeroesAnalytics.Entities
@using CricHeroesAnalytics.Repositories
@using CricHeroesAnalytics.Services.Interfaces
@using CricHeroesAnalytics.Components.Layout
@inject IPlayerAnalyticsService playerService
@inject IMatchAnalyticService matchService
@inject IJobExecutionRepository jobExecutionRepository
@inject IPlayerStatService playerStatService
@inject ICricHeroesApiClient cricHeroesApiClient
@inject IJSRuntime JS

<div class="bg-animation"></div>

<header class="header">
    <nav class="nav-container">
        <a href="/" class="logo">
            <img src="images/Final_Cult11.png" alt="Cult 11 Logo" class="logo-image">
            <div class="logo-text">CULT 11</div>
        </a>
        <ul class="nav-menu">
            <li><a href="/" class="nav-link">Home</a></li>
            <li><a href="/#caps" class="nav-link">Cap Holders</a></li>
            <li><a href="/#leaderboards" class="nav-link">Leaderboards</a></li>
        </ul>
    </nav>
</header>

<main class="container">
    <section class="leaderboard-page">
        <h2 class="section-title">Orange Cap Leaderboard</h2>

        @if (isLoading)
        {
            <div class="loading">
                <div class="spinner"></div>
            </div>
        }
        else
        {
            <!-- Full Leaderboard Table -->
            <div class="leaderboard-table-container">
                <table class="leaderboard-table">
                    <thead>
                        <tr>
                            <th style="text-align: center; width: 10%;">Rank</th>
                            <th style="width: 40%;">Player</th>
                            <th style="text-align: right; width: 15%;">Runs</th>
                            <th style="text-align: right; width: 15%;">Strike Rate</th>
                            <th style="text-align: right; width: 15%;">Average</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var player in players.Select((p, index) => new { Player = p, Rank = index + 1 }))
                        {
                            var last5 = last5BattingStats.TryGetValue(player.Player.Id, out var stats) ? stats : (0d, 0);
                            <tr class="@(player.Rank == 1 ? "rank-1-row" : "")">
                                <td class="rank-cell">@player.Rank</td>
                                <td class="player-cell">
                                    <img src="@player.Player.PlayerProfilePic"
                                         alt="@player.Player.Name"
                                         class="player-profile-img"
                                         onerror="this.onerror=null; this.src='https://placehold.co/60x60/1e293b/f8fafc?text=C11';" />
                                    <a href="@player.Player.PlayerProfile" target="_blank" class="player-link">@player.Player.Name</a>
                                    @if (player.Rank == 1)
                                    {
                                        <img src="/images/OrangeCap.png" alt="Orange Cap" class="cap-icon" />
                                    }
                                </td>
                                <td class="stat-cell">@player.Player.TotalRuns</td>
                                <td class="stat-cell">@GetStatWithArrow(player.Player.StrikeRate, last5.Item2, true)</td>
                                <td class="stat-cell">@GetStatWithArrow(player.Player.BattingAverage, last5.Item1, true)</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <div class="footer-section">
                <button @onclick="Refresh" class="refresh-button" disabled="@isRefreshing">
                    @if (isRefreshing)
                    {
                        <span class="spinner" style="width: 20px; height: 20px; border-width: 2px;"></span>
                        <span>Refreshing...</span>
                    }
                    else
                    {
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16"><path fill-rule="evenodd" d="M8 3a5 5 0 1 0 4.546 2.914.5.5 0 0 1 .908-.417A6 6 0 1 1 8 2v1z" /><path d="M8 4.466V.534a.25.25 0 0 1 .41-.192l2.36 1.966c.12.1.12.284 0 .384L8.41 4.658A.25.25 0 0 1 8 4.466z" /></svg>
                        <span>Refresh</span>
                    }
                </button>
                <div class="last-updated">
                    @if (lastUpdateTime != DateTimeOffset.MinValue)
                    {
                        <span>Last updated: @lastUpdateTime.ToString("MMMM dd, yyyy hh:mm tt")</span>
                    }
                </div>
            </div>
        }
    </section>
</main>

<style>
    /* --- Inherited Styles from Home Page --- */
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    :root {
        --primary-orange: #ff6b35;
        --primary-purple: #8b5cf6;
        --primary-red: #ef4444;
        --dark-bg: #0f172a;
        --card-bg: #1e293b;
        --text-primary: #f8fafc;
        --text-secondary: #94a3b8;
        --gold: #fbbf24;
        --silver: #c0c0c0;
        --bronze: #cd7f32;
        --gradient-1: linear-gradient(135deg, #ff6b35, #f59e0b);
        --gradient-2: linear-gradient(135deg, #8b5cf6, #06b6d4);
        --gradient-3: linear-gradient(135deg, #ef4444, #f97316);
    }

    body {
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
        background: var(--dark-bg);
        color: var(--text-primary);
        line-height: 1.6;
        overflow-x: hidden;
    }

    .bg-animation {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: -1;
        background: var(--dark-bg);
    }

        .bg-animation::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: radial-gradient(circle at 20% 50%, rgba(255, 107, 53, 0.1) 0%, transparent 50%), radial-gradient(circle at 80% 20%, rgba(139, 92, 246, 0.1) 0%, transparent 50%), radial-gradient(circle at 40% 80%, rgba(239, 68, 68, 0.1) 0%, transparent 50%);
            animation: float 20s ease-in-out infinite;
        }

    @@keyframes float {
        0%, 100% {
            transform: translate(0, 0) rotate(0deg);
        }

        33% {
            transform: translate(30px, -30px) rotate(120deg);
        }

        66% {
            transform: translate(-20px, 20px) rotate(240deg);
        }
    }

    .header {
        background: rgba(30, 41, 59, 0.9);
        backdrop-filter: blur(20px);
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        padding: 1rem 0;
        position: sticky;
        top: 0;
        z-index: 100;
    }

    .nav-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 2rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .logo {
        display: flex;
        align-items: center;
        gap: 1rem;
        text-decoration: none;
    }

    .logo-image {
        width: 50px;
        height: 50px;
        object-fit: contain;
        filter: drop-shadow(0 0 10px rgba(255, 107, 53, 0.3));
    }

    .logo-text {
        font-size: 2rem;
        font-weight: 800;
        background: var(--gradient-1);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }

    .nav-menu {
        display: flex;
        gap: 2rem;
        list-style: none;
    }

    .nav-link {
        color: var(--text-secondary);
        text-decoration: none;
        font-weight: 500;
        transition: all 0.3s ease;
        position: relative;
    }

        .nav-link:hover {
            color: var(--text-primary);
            transform: translateY(-2px);
        }

        .nav-link::after {
            content: '';
            position: absolute;
            bottom: -5px;
            left: 0;
            width: 0;
            height: 2px;
            background: var(--gradient-1);
            transition: width 0.3s ease;
        }

        .nav-link:hover::after {
            width: 100%;
        }

    .container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 2rem;
    }

    .section-title {
        text-align: center;
        font-size: 2.5rem;
        font-weight: 700;
        margin-bottom: 3rem;
        position: relative;
    }

        .section-title::after {
            content: '';
            position: absolute;
            bottom: -10px;
            left: 50%;
            transform: translateX(-50%);
            width: 100px;
            height: 4px;
            background: var(--gradient-2); /* Purple gradient for this page */
            border-radius: 2px;
        }

    .loading {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 400px;
    }

    .spinner {
        width: 50px;
        height: 50px;
        border: 3px solid rgba(139, 92, 246, 0.3);
        border-top: 3px solid var(--primary-purple);
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }

    /* --- Styles for Leaderboard Table --- */
    .leaderboard-table-container {
        background: var(--card-bg);
        border-radius: 20px;
        padding: 1rem 2rem;
        border: 1px solid rgba(255, 255, 255, 0.1);
    }

    .leaderboard-table {
        width: 100%;
        border-collapse: collapse;
    }

        .leaderboard-table th, .leaderboard-table td {
            padding: 1rem;
            text-align: left;
            border-bottom: 1px solid rgba(255, 255, 255, 0.05);
        }

        .leaderboard-table tbody tr:last-child td {
            border-bottom: none;
        }

        .leaderboard-table thead {
            border-bottom: 2px solid rgba(255, 255, 255, 0.1);
        }

        .leaderboard-table th {
            font-size: 0.9rem;
            text-transform: uppercase;
            color: var(--text-secondary);
            font-weight: 600;
        }

        .leaderboard-table tbody tr {
            transition: background-color 0.3s ease;
        }

            .leaderboard-table tbody tr:not(.rank-1-row):hover {
                background-color: rgba(255, 255, 255, 0.05);
            }

        .leaderboard-table td {
            color: var(--text-primary);
            vertical-align: middle;
        }

    .player-cell {
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .player-profile-img {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        object-fit: cover;
        border: 2px solid rgba(255, 255, 255, 0.1);
    }

    .player-link {
        color: var(--text-primary);
        text-decoration: none;
        font-weight: 500;
        transition: color 0.3s ease;
    }

        .player-link:hover {
            color: var(--primary-purple);
        }

    .leaderboard-table .rank-cell {
        font-weight: 700;
        color: var(--text-secondary);
        font-size: 1.2rem;
        text-align: center;
    }

    .leaderboard-table .stat-cell {
        font-weight: 700;
        font-size: 1.1rem;
        text-align: right;
    }

    /* Highlight for the first row */
    .rank-1-row {
        background: linear-gradient(90deg, rgba(139, 92, 246, 0.1), transparent);
    }

        .rank-1-row td {
            font-weight: bold;
        }

        .rank-1-row .rank-cell {
            color: var(--gold);
        }

    .cap-icon {
        width: 40px;
        height: 30px;
    }

    .footer-section {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-top: 2rem;
    }

    .refresh-button {
        background: var(--gradient-2);
        color: white;
        border: none;
        padding: 0.75rem 1.5rem;
        border-radius: 50px;
        font-size: 1rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
    }

        .refresh-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 20px rgba(139, 92, 246, 0.2);
        }

        .refresh-button:disabled {
            background: var(--card-bg);
            cursor: not-allowed;
            opacity: 0.5;
        }

    .last-updated {
        font-size: 0.9em;
        color: var(--text-secondary);
    }

    @@media (max-width: 768px) {
        .nav-menu {
            display: none;
        }

        .container {
            padding: 1rem;
        }

        .leaderboard-table-container {
            padding: 0.5rem;
        }

        .leaderboard-table th, .leaderboard-table td {
            padding: 0.75rem;
        }

        .leaderboard-table {
            font-size: 0.9rem;
        }

        .footer-section {
            flex-direction: column;
            gap: 1rem;
        }
    }
</style>
@code {
    private IEnumerable<Player> players = new List<Player>();
    private bool isLoading = true;
    private bool isRefreshing = false;
    private DateTimeOffset lastUpdateTime = DateTimeOffset.MinValue;
    private Dictionary<string, (double avg, int sr)> last5BattingStats = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        var allPlayers = await playerService.GetAllPlayersAsync();

        last5BattingStats.Clear();
        foreach (var p in allPlayers)
        {
            double last5Avg = playerStatService.GetAverageFromLastNInnings(p, 5);
            int last5SR = playerStatService.GetStrikeRateFromLastNInnings(p, 5);
            last5BattingStats[p.Id] = (last5Avg, last5SR);
        }

        players = allPlayers.OrderByDescending(p => p.TotalRuns).ToList();
        lastUpdateTime = await jobExecutionRepository.GetLastSuccessJobTime(Constants.GlobalConstants.CustomUpdateScoreJob);

        isLoading = false;
        StateHasChanged();
    }

    private async Task Refresh()
    {
        isRefreshing = true;
        StateHasChanged();

        cricHeroesApiClient.ResetCache();
        await matchService.UpdateLatestMatchData();
        await LoadData();

        isRefreshing = false;
        StateHasChanged();
    }

    private MarkupString GetStatWithArrow(double overall, double last5, bool isHigherBetter = true)
    {
        const string arrowStyle = "font-family: 'Consolas', 'Courier New', monospace; font-size: 0.75em; vertical-align: -0.15em; display: inline-block; margin-right: 4px;";
        const string dotStyle = "color:gray; font-size: 1em; vertical-align: -0.15em; display: inline-block; margin-right: 4px;";

        string overallFormatted = overall.ToString("0.00");

        if (last5 == 0)
            return new MarkupString(overallFormatted);

        if ((isHigherBetter && last5 > overall) || (!isHigherBetter && last5 < overall))
        {
            return new MarkupString($@"<span style=""color:#22c55e;{arrowStyle}"">▲</span> {overallFormatted}");
        }
        else if ((isHigherBetter && last5 < overall) || (!isHigherBetter && last5 > overall))
        {
            return new MarkupString($@"<span style=""color:#ef4444;{arrowStyle}"">▼</span> {overallFormatted}");
        }
        else
        {
            return new MarkupString($@"<span style=""{dotStyle}"">•</span> {overallFormatted}");
        }
    }
}
